from openai import OpenAI
import httpx
import json

# Initialize OpenAI client with base URL and API key
client = OpenAI(
    api_key="your-api-key-here",  # Replace with your actual API key for GPT-4
    http_client=httpx.Client(
        base_url="https://api.openai.com/v1",  
        follow_redirects=True,
    ),
)

def generate_instruction(question, assistants):
    # Generate the instruction prompt based on provided question and answers from assistants
    instruction = ('#instruction\n'
                   '你是一位负责检查答案质量的助手，需提供有帮助和精确的反馈。\n\n'
                   '#question\n'
                   '{}\n\n'
                   '#answer\n').format(question)
    
    for idx, assistant in enumerate(assistants, start=1):
        instruction += ('[助手{}答案的开始]\n'
                        '{}\n'
                        '[助手{}答案的结束]\n\n').format(idx, assistant, idx)
    
    instruction += ('我们希望你对上面显示问题的多个AI助手的表现提供反馈。每个助手的总体得分为1到5分，分数越高表示整体表现越好。你的评价应该考虑到诸如:1.帮助性 2.问答相关性 3.准确性 4.深度 5.创造力 6.详细程度 等因素，分别对这几个要素进行打分，并给出总分。给出的得分按照如下的json格式:\n'
                    '{{\n'
                    '"question": "{}",\n'
                    '"rank": [\n'
                    '{{"total score": , "helpfulness": , "relevance": , "accuracy": , "depth": , "creativity": , "level of detail": }}\n'
                    ']\n'
                    '}}\n'
                    '在随后的行中，请提供评估的综合解释，避免任何潜在的偏见，并确保回答的顺序不会影响判断。\n').format(question)
    
    return instruction

def call_with_messages(instruction):
    # Call the GPT-4 API to generate completions based on the provided instruction
    completion = client.chat.completions.create(
        model="gpt-4",  # Specify GPT-4 model name or ID
        temperature=0,
        top_p=0.5,
        messages=[
            {"role": "user", "content": instruction}
        ]
    )
    return completion

def process_json(input_file):
    # Process JSON input file to read question and assistants' answers
    with open(input_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Assuming 'data' is a list of dictionaries, each containing 'question' and 'assistants'
    for item in data:
        question = item.get('question', '')
        assistants = item.get('assistants', [])

        instruction = generate_instruction(question, assistants)
        print(instruction)
        
        # Call GPT-4 API to generate completions for each item
        result = call_with_messages(instruction)
        print(result.choices[0].message.content)  # Output generated by GPT-4
        
        # Uncomment to write results to a JSON file for each item
        # with open('eval2.json', 'w', encoding='utf-8') as f:
        #     json.dump(results, f, ensure_ascii=False, indent=4)

if __name__ == '__main__':
    input_file = 'rank_result.json'  # Update to your actual input file name
    process_json(input_file)
