from openai import OpenAI
import httpx
import json

# Initialize OpenAI client with base URL and API key
client = OpenAI(
    api_key="your-api-key-here",  # Replace with your actual API key for GPT-4
    http_client=httpx.Client(
        base_url="https://api.openai.com/v1",  # OpenAI 官方 API 的 URL
        follow_redirects=True,
    ),
)

def generate_instruction(question, assistant1, assistant2):
    # Generate the instruction prompt based on provided question and answers from assistants
    instruction = ('#instruction\n'
                   'As an assistant responsible for assessing answer quality, you need to provide helpful and precise feedback.\n\n'
                   '#问题#\n'
                   '{}\n\n'
                   '#答案#\n'
                   '[助手2答案的开始]\n'
                   '{}\n'
                   '[助手2答案的结束]\n'
                   '[助手1答案的开始]\n'
                   '{}\n'
                   '[助手1答案的结束]\n\n'
                   'We want you to provide feedback on the performance of the two AI assistants shown above. Your evaluation should consider factors such as helpfulness, relevance, accuracy, depth, creativity, and level of detail. Each assistant receives an overall score from 1 to 5, where higher scores indicate better overall performance. Please first output a single line containing only the scores for assistant 1 and assistant 2, separated by a space. On subsequent lines, provide a comprehensive assessment that avoids any potential biases and ensures the order of your responses does not affect judgment.\n').format(question, assistant2, assistant1)
    return instruction

def call_with_messages(instruction):
    # Call the GPT-4 API to generate completions based on the provided instruction
    completion = client.chat.completions.create(
        model="gpt-4",  # Specify GPT-4 model name or ID
        temperature=0,
        top_p=0.5,
        messages=[
            {"role": "user", "content": instruction}
        ]
    )
    return completion

def process_json(input_file):
    # Process JSON input file to read question, assistant1, and assistant2 for each pair of data
    with open(input_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # Assuming 'data' is a list of dictionaries, each containing 'question', 'assistant1', 'assistant2'
    for item in data:
        question = item.get('question', '')
        assistant1 = item.get('assistant1', '')
        assistant2 = item.get('assistant2', '')

        instruction = generate_instruction(question, assistant1, assistant2)
        print(instruction)
        
        # Call GPT-4 API to generate completions for each item
        result = call_with_messages(instruction)
        print(result.choices[0].message.content)  # Output generated by GPT-4
        
        # Uncomment to write results to a JSON file for each item
        # with open('eval2.json', 'w', encoding='utf-8') as f:
        #     json.dump(results, f, ensure_ascii=False, indent=4)

if __name__ == '__main__':
    input_file = 'pair_result.json'  # Update to your actual input file name
    process_json(input_file)
